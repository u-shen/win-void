{
  "Console Log Vscode": {
    "prefix": "log",
    "body": ["console.log($1)$0"],
    "description": "Console log statement"
  },
  "Console Log": {
    "prefix": "clg",
    "body": ["console.log($1)$0"],
    "description": "Console log statement"
  },
  "af": {
    "prefix": "af",
    "body": "($1) => ${2:{ ${3:} \\}}",
    "description": "arrow function"
  },
  "Anonymous Function": {
    "prefix": "anfn",
    "body": ["($1) => {", "\t$0", "}"],
    "description": "Anonymous arrow function"
  },
  "Short Anonymous Function": {
    "prefix": "anf",
    "body": ["($1) => $0"],
    "description": "Anonymous arrow function"
  },
  "Export Default Function": {
    "prefix": "edfn",
    "body": ["export default function $1($2) {", "\t$0", "}"],
    "description": "Export default function"
  },
  "React Function Component": {
    "prefix": "rfc",
    "body": ["export default function $1() {", "\treturn <div>$0</div>", "}"],
    "description": "Create a React function component with export default"
  },
  "React Function Component Typescript": {
    "prefix": "rfce",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  return <div />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create ReactJS Functional Component Typescript"
  },
  "Create useEffect hook": {
    "prefix": "use",
    "body": ["useEffect(() => {", "\t", "}, []);"],
    "description": "Creates React useEffect hook"
  },
  "useCallback Hook": {
    "prefix": "ucb",
    "body": ["const $1 = useCallback(($2) => {", "\t$3", "}, [$4])$0"],
    "description": "React useCallback hook"
  },
  "useMemo Hook": {
    "prefix": "umm",
    "body": ["const $1 = useMemo(($2) => {", "\t$3", "}, [$4])$0"],
    "description": "React useCallback hook"
  },
  "Create useState hook": {
    "prefix": "uss",
    "body": [
      "const [${1:state}, set${1:State}] = useState(${2:defaultState});"
    ],
    "description": "Creates React useState hook"
  },
  "IIFE": {
    "prefix": "iife",
    "body": ["(() => {", "\t$1", "})()$0"],
    "description": "Immediately Invoked Function Expression"
  },
  "return": {
    "prefix": "r",
    "body": "return ${0}"
  },
  "import": {
    "prefix": "i",
    "body": "import ${0}"
  },
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';"],
    "description": "Imports React"
  },
  "Create useContext hook": {
    "prefix": "usc",
    "body": ["const ${1:value} = useContext(MyContext);"],
    "description": "Creates React useContext hook"
  },
  "Create useReducer hook": {
    "prefix": "usr",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, initialState);"
    ],
    "description": "Creates React useReducer hook"
  },
  "Create useCallback hook": {
    "prefix": "usb",
    "body": [
      "const ${1:memoizedCallback} = useCallback(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useCallback hook"
  },
  "Create useMemo hook": {
    "prefix": "usm",
    "body": ["const ${1:memoizedValue} = useMemo(() => {", "\t", "}, []);"],
    "description": "Creates React useMemo hook"
  },
  "Create useRef hook": {
    "prefix": "usr",
    "body": ["const ${1:refContainer} = useRef(${2:initialValue});"],
    "description": "Creates React useRef hook"
  },
  "Create useImperativeHandle hook": {
    "prefix": "usi",
    "body": ["useImperativeHandle(${1:initialValue}, () => {", "\t", "}, []);"],
    "description": "Creates React useImperativeHandle hook"
  },
  "Create useLayoutEffect hook": {
    "prefix": "usl",
    "body": ["useLayoutEffect(() => {", "\t", "}, []);"],
    "description": "Creates React useLayoutEffect hook"
  },
  "Create useDebugValue hook": {
    "prefix": "usv",
    "body": ["useDebugValue(${1:value}"],
    "description": "Creates React useDebugValue hook"
  },
  "Create useSelector hook": {
    "prefix": "us",
    "body": [
      "const ${1:selectedData} = useSelector(state => state.${2:YourObject});"
    ],
    "description": "Creates Redux useSelector hook"
  },
  "Create useDispatch hook": {
    "prefix": "usd",
    "body": ["const dispatch = useDispatch();"],
    "description": "Creates Redux useDispatch hook"
  },
  "Create useStore hook": {
    "prefix": "usr",
    "body": ["const store = useStore();"],
    "description": "Creates Redux useStore hook"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  }
}
